

A framework (whether mobile or web) is basically an environment to coalesce code (both FE & BE) & allow it to listen for requests.
We've got web & application servers in relation to a hosted application.
The web server hosts the front end code files such as html, css, javascript; while the application server contains backend content that runs the business logic aspect of the application.
An example of a static web server is Apache & nginx, while dynamic application servers include Apache tomcat & unicorn.
HTTP web servers are static; while dynamic application servers are dynamic - since the client interacts with the FE code to trigger particular processes, which isn't the case with static http web servers.
Ps. Any laptop/computer can act as a server. A server's job is basically to listen in on requests from clients through a particular port and respond accordingly. 



As i close in on a month of foundation learning of key concepts, today I learned:
>Basics of an application (though I have a pretty good grasp of Go at the moment
>Database concepts, how they operate, an understanding of what a relation & non-relational database actually means; The example in each category such as MySQL, PostgreSQL, Windows SQL Server & MongoDB, DynamoDB respectively.

I also took a deep-dive in understanding the big picture of what DevOps seeks to achieve & I love the definition that I coined. DevOps (fundamentally, straight-to-the-point & in very few words) is culture. practice. tools. value. DevOps is continuous value delivery to a customer - (extended version) that is facilitated by an infusion of a particular organizational & team culture, tech tools & practices.


Developing, compiling and packaging source code.
After developing human readable code from various developers on the team, this is compiled into byte code (to allow mass compatibility with all manner of computers)
In the case of code written in Java, .class files are created & all these files cumulatively form a .jar file. Dependancies are included by this stage. (created through a jar.... command) 

A package manager eg. Gradle facilitates this entire process (compile>document>create deployable jar file)

Explored NodeJS, Python basics & their respective package managers: NPM, PIP & ... 
Next, taking a deep dive into databases will be great:)



Understanding load balancing, reserve & forward proxy servers.







Agnostic vs native approaches.
A cloud agnostic architecture approach involves developing applications compatible with various cloud based tools or solutions.
A cloud native architecture approach involves developing applications solely built/incorporated with specific tools - pretty much vendor lock-in.


                           CLOUD NATIVE vs CLOUD AGNOSTIC

If dev teams focus is CORE SERVICES & APPS, for sake of company's business model> Start with 		Agnostic Approach> to avoid company survival to be tied to a cloud provider. Once stable, try native approach for ancillary (support) company services.


If dev team focus is TIME TO MARKET - basically how quickly you get the product in front of the consumer, then a Native Approach is preferred before trying an agnostic approach once satbility is achieved or specialized resources are acquired to try an agnostic approach.



1. COST
>>Native: Cost-friendly; in-house tooling; cost management services to track spending
>>Agnostic: Increased accessibility to more tools; self-tracking of spending


2. FLEXIBILITY
>>Native: In-house availability for security, networking & particular tools (CodeCommit; AWS)
>>Agnostic: TAke advantage of devp trends; increased tooling access; devs create integrations & functionalities on their own (security, monitoring) - costly & time-consuming process.


3. RELIABILITY
>>Native:vendor lock-in with price hikes.
>>Agnostic:REduced recovery time in event of a failure; minimized downtime during maintenance of one platform -easily switch to another


4. TIME TO MARKET
>>Native: Shorter time coz of ready-to-use infrastructure eg. Cloud BUild enables building, testing & deploying apps out of the box.
>>Agnostic: Risk of losing competitive edge.


5. SCALABILITY
>>Native: N/A
>>Agnostic: Useful when migrating on-prem services to the cloud -easier to trans while maintaining core business services.Apps & services are easily scalable to meet demand when moved btwn platforms.


6. EFFICIENCY
>>Native: Advantage in regards to support for security, app monitoring & b-e mgt.
>>Agnostic: Orchestrating challenges when building a unified orchestration layer to manage complexities on different cloud platforms; wasting resources - tools that are never used.





Understanding the different services offered by GCP in detail: CLoud Functions, Cloud Run, App Engine, Compute Engine & GKE!
